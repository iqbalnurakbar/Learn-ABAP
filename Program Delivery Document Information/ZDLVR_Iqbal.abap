*&---------------------------------------------------------------------*
*& Report ZDLVR_Iqbal
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
REPORT ZDLVR_Iqbal.
TABLES: LIPS, LIKP, KNA1, MAKT.

TYPES: BEGIN OF TY_RESULT,
         VBELN TYPE LIPS-VBELN,  "Delivery Document Number:
         POSNR TYPE LIPS-POSNR,  "Item Number:
         VSTEL TYPE LIKP-VSTEL,  "Shipping Point:
         KUNNR TYPE LIKP-KUNNR,  "Customer Number:
         NAME1 TYPE KNA1-NAME1,  "Customer Name:
         MATNR TYPE LIPS-MATNR,  "Material Number:
         MAKTX TYPE MAKT-MAKTX,  "Material Description:
         LFIMG TYPE LIPS-LFIMG,  "Delivery Quantity:
         VRKME TYPE LIPS-VRKME,  "Delivery Unit:
         BRGEW TYPE LIPS-BRGEW,  "Net Weight:
         NTGEW TYPE LIPS-NTGEW,  "Gross Weight:
       END OF TY_RESULT.

TYPES: TT_RESULT TYPE TABLE OF TY_RESULT.

DATA: GT_RESULT TYPE TT_RESULT,
      GS_RESULT TYPE TY_RESULT.

CONSTANTS: GC_E TYPE CHAR1 VALUE 'E'.

SELECT-OPTIONS: S_VBELN FOR LIKP-VBELN. "Delivery document
PARAMETERS: P_VSTEL TYPE LIKP-VSTEL OBLIGATORY. "Shipping point
SELECT-OPTIONS: S_MATNR FOR LIPS-MATNR. "material number

INITIALIZATION.
  S_VBELN-LOW = '80000017'.
  S_VBELN-SIGN = 'I'.
  S_VBELN-OPTION = 'BT'.
  APPEND S_VBELN.

AT SELECTION-SCREEN.
  SELECT COUNT(*)
    FROM LIKP
    WHERE VBELN IN @S_VBELN.

  IF SY-SUBRC <> 0.
    MESSAGE |{ TEXT-E01 } { S_VBELN-LOW }| TYPE GC_E.
  ENDIF.

  IF S_VBELN IS INITIAL.
    MESSAGE |{ TEXT-E02 }| TYPE GC_E.
  ENDIF.

START-OF-SELECTION.
  SELECT LS~VBELN,
         LS~POSNR,
         LP~VSTEL,
         LP~KUNNR,
         LS~MATNR,
         LS~LFIMG,
         LS~VRKME,
         LS~BRGEW,
         LS~NTGEW

INTO TABLE @DATA(GT_COMBINED1)
FROM LIPS AS LS
INNER JOIN LIKP AS LP ON LP~VBELN = LS~VBELN
WHERE LS~VBELN IN @S_VBELN
AND   LP~VSTEL = @P_VSTEL
AND   LS~MATNR IN @S_MATNR.

  IF SY-SUBRC = 0.
    SELECT KUNNR,
           NAME1
      INTO TABLE @DATA(GT_KNA1)
      FROM KNA1
      FOR ALL ENTRIES IN @GT_COMBINED1
      WHERE KUNNR = @GT_COMBINED1-KUNNR.

    SELECT MATNR,
           MAKTX
      INTO TABLE @DATA(GT_MAKT)
      FROM MAKT
      FOR ALL ENTRIES IN @GT_COMBINED1
      WHERE MATNR = @GT_COMBINED1-MATNR
        AND SPRAS = @SY-LANGU.

    LOOP AT GT_COMBINED1 INTO DATA(GS_COMBINED1).

      GS_RESULT-VBELN  =   GS_COMBINED1-VBELN.
      GS_RESULT-POSNR  =   GS_COMBINED1-POSNR.
      GS_RESULT-VSTEL  =   GS_COMBINED1-VSTEL.
      GS_RESULT-KUNNR  =   GS_COMBINED1-KUNNR.
      GS_RESULT-MATNR  =   GS_COMBINED1-MATNR.
      GS_RESULT-LFIMG  =   GS_COMBINED1-LFIMG.
      GS_RESULT-VRKME  =   GS_COMBINED1-VRKME.
      GS_RESULT-BRGEW  =   GS_COMBINED1-BRGEW.
      GS_RESULT-NTGEW  =   GS_COMBINED1-NTGEW.

      READ TABLE GT_KNA1 INTO DATA(GS_KNA1) WITH KEY KUNNR = GS_RESULT-KUNNR.
      IF SY-SUBRC = 0.
        GS_RESULT-NAME1 = GS_KNA1-NAME1.
      ENDIF.

      READ TABLE GT_MAKT INTO DATA(GS_MAKT) WITH KEY MATNR = GS_RESULT-MATNR.
      IF SY-SUBRC = 0.
        GS_RESULT-MAKTX = GS_MAKT-MAKTX.
      ENDIF.

      GS_RESULT-VBELN = |{ GS_RESULT-VBELN ALPHA = OUT }|.

      GS_RESULT-KUNNR = |{ GS_RESULT-KUNNR ALPHA = OUT }|.


      CALL FUNCTION 'CONVERSION_EXIT_CUNIT_OUTPUT'
        EXPORTING
          INPUT          = GS_RESULT-VRKME
          LANGUAGE       = SY-LANGU
        IMPORTING
          OUTPUT         = GS_RESULT-VRKME
        EXCEPTIONS
          UNIT_NOT_FOUND = 1.

      APPEND GS_RESULT TO GT_RESULT.
      CLEAR GS_COMBINED1.
      CLEAR GS_RESULT.
    ENDLOOP.

    IF SY-SUBRC = 0.
      CL_DEMO_OUTPUT=>DISPLAY( GT_RESULT ).
    ENDIF.

  ELSE.
    MESSAGE |DATA NOT FOUND| TYPE GC_E.

  ENDIF.
